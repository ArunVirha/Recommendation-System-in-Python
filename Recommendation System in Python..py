# -*- coding: utf-8 -*-
"""Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HUXG_Rx64EivV76LnQpaykyFcHiJgUme

# A project on **Content-based Recommendation Systems**

Recommendation systems are a collection of algorithms used to recommend items to users based on information taken from the user. These systems have become ubiquitous, and can be commonly seen in online stores, movies databases and job finders. In this project, we will explore Content-based recommendation systems and implement a simple version of one using Python and the Pandas library.

Dataset has been  acquired from GroupLens. Lets download the dataset. To download the data, we will use !wget to download it from IBM Object Storage.
"""

!wget -O moviedataset.zip https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/moviedataset.zip

print('unziping ...')
!unzip -o -j moviedataset.zip

"""Now, we have the data and we will start working on it.

**Required Libraries:**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
from math import sqrt
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

"""### **Preprocessing**

**Converting files into dataframe**
"""

movies_df = pd.read_csv('movies.csv')
ratings_df = pd.read_csv('ratings.csv')
movies_df.head()

"""Let's also remove the year from the __title__ column by using pandas' replace function and store in a new __year__ column."""

#Using regular expressions to find a year stored between parentheses
#We specify the parantheses so we don't conflict with movies that have years in their titles
movies_df['year'] = movies_df.title.str.extract('(\(\d\d\d\d\))',expand=False)
#Removing the parentheses
movies_df['year'] = movies_df.year.str.extract('(\d\d\d\d)',expand=False)
#Removing the years from the 'title' column
movies_df['title'] = movies_df.title.str.replace('(\(\d\d\d\d\))', '')
#Applying the strip function to get rid of any ending whitespace characters that may have appeared
movies_df['title'] = movies_df['title'].apply(lambda x: x.strip())
movies_df.head()

"""With that, let's also split the values in the __Genres__ column into a __list of Genres__ to simplify future use."""

#Every genre is separated by a | so we simply have to call the split function on |
movies_df['genres'] = movies_df.genres.str.split('|')
movies_df.head()

"""Since keeping genres in a list format is not optimal for the content-based recommendation system technique, we will convert the list of genres to a vector where each column corresponds to one possible value of the feature. In this case, we store every different genre in columns that contain either 1 or 0 where 1 shows that a movie has that genre and 0 shows that it doesn't. Let's also store this dataframe in another variable since genres won't be important for our first recommendation system."""

movies_df.shape

moviesWithGenres_df = movies_df.copy()

for index, row in movies_df.iterrows():
    for genre in row['genres']:
        moviesWithGenres_df.at[index, genre] = 1
#Filling in the NaN values with 0 to show that a movie doesn't have that column's genre
moviesWithGenres_df = moviesWithGenres_df.fillna(0)
moviesWithGenres_df.head()

"""Now. coming to the ratings dataset"""

ratings_df.head()

"""Every row in the ratings dataframe has a user id associated with at least one movie, a rating and a timestamp showing when they reviewed it. We won't be needing the timestamp column, so we will drop it."""

#Dropping a 'timestamp' column from a dataframe as we do not need it.
ratings_df = ratings_df.drop('timestamp', 1)
ratings_df.head()

"""Let's begin by creating an input user to recommend movies to:"""

userInput = {'title':['Breakfast Club, The', 'Toy Story', 'Jumanji', 'Pulp Fiction', 'Akira'], 'rating':[5,3.5,2,5,4.5]}
inputMovies = pd.DataFrame(userInput)
inputMovies

"""Adding movieId to input user.We will extract the input movie's ID's from the movies dataframe and add them into it.

We can achieve this by first filtering out the rows that contain the input movie's title and then merging this subset with the input dataframe. We also drop unnecessary columns for the input to save memory space.
"""

#Filtering out the movies by title
inputId = movies_df[movies_df['title'].isin(inputMovies['title'].tolist())]
inputId.head()

#merging it so we can get the movieId. It's implicitly merging it by title.
inputMovies = pd.merge(inputId, inputMovies)
inputMovies.head()

#Dropping information we won't use from the inputMovies dataframe
inputMovies = inputMovies.drop('genres', 1).drop('year', 1)
inputMovies.head()

"""We're going to start by learning the input's preferences, so  we will get the subset of movies that the input has watched from the Dataframe containing genres defined with binary values i.e.,0 and 1.

We will only need the actual genre table, so let's clean this up a bit by resetting the index and dropping the movieId, title, genres and year columns.
"""

#Filtering out the movies from the input
userMovies = moviesWithGenres_df[moviesWithGenres_df['movieId'].isin(inputMovies['movieId'].tolist())]
#Resetting the index to avoid future issues
userMovies = userMovies.reset_index(drop=True)
userMovies.head()

#Dropping unnecessary attributes
userGenreTable = userMovies.drop('movieId', 1).drop('title', 1).drop('genres', 1).drop('year', 1)
userGenreTable

"""Now, we are going to turn each genre into weights. We can do this by using the
dot product between a matrix  (userGenreTable) and a vector (input ratings) .
"""

inputMovies['rating']

#Dot product to get weights
userProfile = userGenreTable.transpose().dot(inputMovies['rating'])
userProfile

"""Now, we have the weights for every of the user's preferences. Generally, this is known as the User Profile. Using this, we can recommend movies that satisfy the user's preferences.

Extracting the genre table from the original dataframe:
"""

#Now let's get the genres of every movie in our original dataframe
genreTable = moviesWithGenres_df.set_index(moviesWithGenres_df['movieId'])
genreTable.head()

#And drop the unnecessary information
genreTable = genreTable.drop('movieId', 1).drop('title', 1).drop('genres', 1).drop('year', 1)
genreTable.head()

genreTable.shape

"""With the input's profile and the complete list of movies and their genres in hand, we're going to take the weighted average of every movie based on the input profile and recommend the top twenty movies that most satisfy it."""

#Multiply the genres by the weights and then take the weighted average
recommendationTable_df = ((genreTable*userProfile).sum(axis=1))/(userProfile.sum())
recommendationTable_df.head()

recommendationTable_df.shape

#Sort our recommendations in descending order
recommendationTable_df = recommendationTable_df.sort_values(ascending=False)
#Just a peek at the values
recommendationTable_df.head(10)

"""So, finally we have the recommendation table:"""

#Highest rating predicted for movie ID 5018

#The final recommendation table
movies_df.loc[movies_df['movieId'].isin(recommendationTable_df.head(20).keys())]

"""**Here, recommended movies are arranged in ascending order by movie ID an are top 20 movies in descending order by prediction value i.e., [0,1]**

Thanks

Arun Virha
"""

